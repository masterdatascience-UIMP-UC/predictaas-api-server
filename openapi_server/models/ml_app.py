# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class MLApp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appname: str=None, entrypoint: str=None, methods: str=None, contact: str=None):
        """MLApp - a model defined in OpenAPI

        :param appname: The appname of this MLApp.
        :param entrypoint: The entrypoint of this MLApp.
        :param methods: The methods of this MLApp.
        :param contact: The contact of this MLApp.
        """
        self.openapi_types = {
            'appname': str,
            'entrypoint': str,
            'methods': str,
            'contact': str
        }

        self.attribute_map = {
            'appname': 'appname',
            'entrypoint': 'entrypoint',
            'methods': 'methods',
            'contact': 'contact'
        }

        self._appname = appname
        self._entrypoint = entrypoint
        self._methods = methods
        self._contact = contact

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MLApp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MLApp of this MLApp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appname(self):
        """Gets the appname of this MLApp.

        ML app supplied username

        :return: The appname of this MLApp.
        :rtype: str
        """
        return self._appname

    @appname.setter
    def appname(self, appname):
        """Sets the appname of this MLApp.

        ML app supplied username

        :param appname: The appname of this MLApp.
        :type appname: str
        """
        if appname is not None and len(appname) < 4:
            raise ValueError("Invalid value for `appname`, length must be greater than or equal to `4`")

        self._appname = appname

    @property
    def entrypoint(self):
        """Gets the entrypoint of this MLApp.

        Python's app entrypoint name

        :return: The entrypoint of this MLApp.
        :rtype: str
        """
        return self._entrypoint

    @entrypoint.setter
    def entrypoint(self, entrypoint):
        """Sets the entrypoint of this MLApp.

        Python's app entrypoint name

        :param entrypoint: The entrypoint of this MLApp.
        :type entrypoint: str
        """
        if entrypoint is not None and len(entrypoint) < 1:
            raise ValueError("Invalid value for `entrypoint`, length must be greater than or equal to `1`")

        self._entrypoint = entrypoint

    @property
    def methods(self):
        """Gets the methods of this MLApp.

        Methods implemented by the ML app

        :return: The methods of this MLApp.
        :rtype: str
        """
        return self._methods

    @methods.setter
    def methods(self, methods):
        """Sets the methods of this MLApp.

        Methods implemented by the ML app

        :param methods: The methods of this MLApp.
        :type methods: str
        """
        allowed_values = ["predict", "train"]  # noqa: E501
        if methods not in allowed_values:
            raise ValueError(
                "Invalid value for `methods` ({0}), must be one of {1}"
                .format(methods, allowed_values)
            )

        self._methods = methods

    @property
    def contact(self):
        """Gets the contact of this MLApp.

        Main contact email address

        :return: The contact of this MLApp.
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this MLApp.

        Main contact email address

        :param contact: The contact of this MLApp.
        :type contact: str
        """

        self._contact = contact
